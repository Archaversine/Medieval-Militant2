module Main where

import Apecs

import Control.Monad

import Entity.Tower
import Entity.Projectile

import Game
import Game.World

import Linear

import Raylib.Core
import Raylib.Types.Core
import Raylib.Util
import Raylib.Util.Colors

-- | Game initialization function
--
-- This function will only run once at the start of the game. 
-- This is useful for initializing data
gameInit :: Game ()
gameInit = do 
    let towers = [ createAcceleration 
                 , createAttractor    
                 , createFire         
                 , createLightning    
                 , createPoison       
                 , createSniper       
                 , createStandard     
                 , createSupport      
                 , createTemporal     
                 ]

    -- Coordinates to place towers at
    let xs     = [30, 30 + 130 .. 650]
        ys     = [30, 30 + 130 .. 450]
        coords = [V2 x y | x <- xs, y <- ys]

    -- spawn all towers with automatic spacing
    zipWithM_ id towers coords

    createDefaultProjectile (V2 0 0) (V2 2 1)

-- | Game Frame Function
-- 
-- Function which performs all calculations in a game frame
--
-- You will likely never need to modify this function
gameFrame :: Game () 
gameFrame = tick *> liftIO beginDrawing *> render *> liftIO endDrawing

-- | Game Tick/Update Function
--
-- All logical updates should go here. 
-- This function runs once per frame
--
-- Such as: updating position, health, etc.
tick :: Game () 
tick = do 
    cmap $ \(Pos p, Vel dir) -> Pos (p + dir) -- Position is updated by velocity

-- | Game Render Function
--
-- All rendering should go here.
-- 
-- NOTE: Items that are rendered first will render at the bottom of the screen
render :: Game () 
render = do 
    liftIO $ clearBackground darkGray
    cmapM_ $ \(Pos p, Rot theta, Renderer f) -> liftIO (f p theta) -- render everything that has a position and a renderer

main :: IO ()
main = do 
    let width  = 800 
        height = 600
        title  = "Medieval Militant"
        fps    = 60
    
    initWindowUnmanaged width height title
    setWindowState [WindowResizable]
    setTargetFPS fps

    let s = GameState {windowWidth = width, windowHeight = height}

    -- `initWorld` is automatically generated by the `makeWorldAndComponents` function 
    w <- initWorld

    -- run the init function
    runGame gameInit w s
    
    -- game loop
    whileWindowOpen0 $ do 
        runGame gameFrame w s
